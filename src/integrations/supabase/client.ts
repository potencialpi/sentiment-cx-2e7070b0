// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Prioriza variáveis de ambiente do Vite (VITE_*). Mantém compatibilidade com NEXT_PUBLIC_* como fallback.
const SUPABASE_URL =
  import.meta.env.VITE_SUPABASE_URL ||
  import.meta.env.NEXT_PUBLIC_SUPABASE_URL ||
  "https://mjuxvppexydaeuoernxa.supabase.co";

const SUPABASE_PUBLISHABLE_KEY =
  import.meta.env.VITE_SUPABASE_ANON_KEY ||
  import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ||
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1qdXh2cHBleHlkYWV1b2VybnhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM0NDAzNjYsImV4cCI6MjA2OTAxNjM2Nn0.ECVfL7CLqJj4wSPBY7g5yu_zdfBqbUTCK18MAXHjeTg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Criar o cliente Supabase primeiro
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Interceptador para garantir autenticação em Edge Functions
supabase.functions.setAuth = async (token?: string) => {
  if (!token) {
    const { data: { session } } = await supabase.auth.getSession();
    if (!session?.access_token) {
      throw new Error('Usuário não autenticado');
    }
    token = session.access_token;
  }
  return token;
};

// Sobrescrever invoke para sempre incluir autenticação
const originalInvoke = supabase.functions.invoke;
supabase.functions.invoke = async (functionName: string, options: any = {}) => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session?.access_token) {
      throw new Error('Acesso negado: Usuário não autenticado');
    }
    
    // Garantir que o token de autenticação seja sempre incluído
    const headers = {
      'Authorization': `Bearer ${session.access_token}`,
      ...options.headers
    };
    
    return originalInvoke.call(supabase.functions, functionName, {
      ...options,
      headers
    });
  } catch (error) {
    console.error('❌ Erro na chamada da Edge Function:', error);
    throw error;
  }
};