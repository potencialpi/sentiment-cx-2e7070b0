const { createClient } = require('@supabase/supabase-js');

// Verifica√ß√£o de vari√°veis de ambiente
if (!process.env.SUPABASE_URL && !process.env.VITE_SUPABASE_URL) {
  console.error('‚ùå SUPABASE_URL n√£o encontrada nas vari√°veis de ambiente');
  console.log('üí° Certifique-se de que o arquivo .env.local existe e cont√©m VITE_SUPABASE_URL');
  process.exit(1);
}

if (!process.env.SUPABASE_ANON_KEY && !process.env.VITE_SUPABASE_ANON_KEY) {
  console.error('‚ùå SUPABASE_ANON_KEY n√£o encontrada nas vari√°veis de ambiente');
  console.log('üí° Certifique-se de que o arquivo .env.local existe e cont√©m VITE_SUPABASE_ANON_KEY');
  process.exit(1);
}


const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function testFinalFix() {
  console.log('üß™ Teste final: Verificando se o erro da coluna "questions" foi resolvido\n');

  try {
    // 1. Testar acesso b√°sico √† tabela surveys
    console.log('1. Testando acesso b√°sico √† tabela surveys...');
    const { data: surveysData, error: surveysError } = await supabase
      .from('surveys')
      .select('*')
      .limit(5);

    if (surveysError) {
      console.log('‚ùå Erro ao acessar tabela surveys:', surveysError.message);
      
      if (surveysError.message.includes('questions') || surveysError.message.includes('question')) {
        console.log('\nüîß O erro ainda est√° relacionado √†s colunas "questions" ou "question"');
        console.log('Execute os seguintes comandos no Supabase Dashboard:');
        console.log('   ALTER TABLE public.surveys DROP COLUMN IF EXISTS questions;');
        console.log('   ALTER TABLE public.surveys DROP COLUMN IF EXISTS question;');
        return;
      }
      
      console.log('\n‚ùå Erro diferente encontrado. Verifique a configura√ß√£o do Supabase.');
      return;
    }

    console.log('‚úÖ Acesso √† tabela surveys funcionando!');
    console.log(`üìä Encontrados ${surveysData.length} registros`);

    // 2. Testar opera√ß√µes espec√≠ficas que antes causavam erro
    console.log('\n2. Testando opera√ß√µes espec√≠ficas...');
    
    // Testar SELECT com colunas espec√≠ficas
    const { data: specificData, error: specificError } = await supabase
      .from('surveys')
      .select('id, title, description, status, current_responses, max_responses, unique_link')
      .limit(1);

    if (specificError) {
      console.log('‚ùå Erro em SELECT espec√≠fico:', specificError.message);
      return;
    }

    console.log('‚úÖ SELECT com colunas espec√≠ficas funcionando!');

    // 3. Testar acesso √† tabela questions (separada)
    console.log('\n3. Testando acesso √† tabela questions...');
    const { data: questionsData, error: questionsError } = await supabase
      .from('questions')
      .select('*')
      .limit(5);

    if (questionsError) {
      console.log('‚ùå Erro ao acessar tabela questions:', questionsError.message);
    } else {
      console.log('‚úÖ Acesso √† tabela questions funcionando!');
      console.log(`üìä Encontradas ${questionsData.length} perguntas`);
    }

    console.log('\nüéâ SUCESSO! O erro da coluna "questions" foi resolvido!');
    console.log('‚úÖ A aplica√ß√£o deve estar funcionando normalmente agora.');
    console.log('\nüìã Resumo da corre√ß√£o:');
    console.log('   - Tipos do Supabase regenerados');
    console.log('   - Tabela surveys com estrutura correta');
    console.log('   - Tabela questions separada funcionando');
    console.log('   - Servidor de desenvolvimento reiniciado');

  } catch (error) {
    console.log('‚ùå Erro inesperado:', error.message);
  }
}

testFinalFix();