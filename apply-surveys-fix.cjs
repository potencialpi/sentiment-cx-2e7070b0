#!/usr/bin/env node

// =====================================================
// APLICAR CORRE√á√ÉO ESPEC√çFICA: REMOVER ACESSO AN√îNIMO DA TABELA SURVEYS
// =====================================================

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do cliente Supabase com service role
const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !serviceRoleKey) {
    console.error('‚ùå Erro: Vari√°veis de ambiente n√£o configuradas');
    console.error('   VITE_SUPABASE_URL:', !!supabaseUrl);
    console.error('   SUPABASE_SERVICE_ROLE_KEY:', !!serviceRoleKey);
    process.exit(1);
}

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function executeSql(sql, description) {
    console.log(`\nüîß ${description}...`);
    try {
        const { data, error } = await supabase.rpc('exec', { sql });
        if (error) {
            console.error(`‚ùå Erro: ${error.message}`);
            return false;
        }
        console.log(`‚úÖ ${description} - Sucesso`);
        if (data && data.length > 0) {
            console.log('üìä Resultado:', data);
        }
        return true;
    } catch (err) {
        console.error(`‚ùå Erro: ${err.message}`);
        return false;
    }
}

async function applySurveysFix() {
    console.log('üîí APLICANDO CORRE√á√ÉO ESPEC√çFICA: REMOVER ACESSO AN√îNIMO DA TABELA SURVEYS');
    console.log('=' .repeat(80));

    let successCount = 0;
    let totalOperations = 0;

    // 1. Verificar estado atual
    totalOperations++;
    const checkCurrentState = `
        SELECT 
            schemaname,
            tablename,
            rowsecurity as rls_enabled,
            CASE 
                WHEN rowsecurity THEN 'RLS Habilitado'
                ELSE 'RLS Desabilitado'
            END as status
        FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename = 'surveys';
    `;
    if (await executeSql(checkCurrentState, 'Verificando estado atual da tabela surveys')) {
        successCount++;
    }

    // 2. Revogar todos os privil√©gios an√¥nimos
    totalOperations++;
    const revokeAnonPrivileges = `
        REVOKE ALL PRIVILEGES ON TABLE public.surveys FROM anon;
        REVOKE SELECT ON TABLE public.surveys FROM anon;
        REVOKE INSERT ON TABLE public.surveys FROM anon;
        REVOKE UPDATE ON TABLE public.surveys FROM anon;
        REVOKE DELETE ON TABLE public.surveys FROM anon;
        REVOKE REFERENCES ON TABLE public.surveys FROM anon;
        REVOKE TRIGGER ON TABLE public.surveys FROM anon;
        REVOKE TRUNCATE ON TABLE public.surveys FROM anon;
    `;
    if (await executeSql(revokeAnonPrivileges, 'Revogando todos os privil√©gios an√¥nimos da tabela surveys')) {
        successCount++;
    }

    // 3. Habilitar RLS
    totalOperations++;
    const enableRLS = `ALTER TABLE public.surveys ENABLE ROW LEVEL SECURITY;`;
    if (await executeSql(enableRLS, 'Habilitando RLS na tabela surveys')) {
        successCount++;
    }

    // 4. Remover todas as pol√≠ticas existentes
    totalOperations++;
    const dropPolicies = `
        DROP POLICY IF EXISTS "Users can view own surveys" ON public.surveys;
        DROP POLICY IF EXISTS "Users can insert own surveys" ON public.surveys;
        DROP POLICY IF EXISTS "Users can update own surveys" ON public.surveys;
        DROP POLICY IF EXISTS "Users can delete own surveys" ON public.surveys;
        DROP POLICY IF EXISTS "Enable read access for all users" ON public.surveys;
        DROP POLICY IF EXISTS "Enable insert for authenticated users only" ON public.surveys;
        DROP POLICY IF EXISTS "Enable update for users based on user_id" ON public.surveys;
        DROP POLICY IF EXISTS "Enable delete for users based on user_id" ON public.surveys;
        DROP POLICY IF EXISTS "Authenticated users can view own surveys" ON public.surveys;
        DROP POLICY IF EXISTS "Authenticated users can insert surveys" ON public.surveys;
        DROP POLICY IF EXISTS "Authenticated users can update own surveys" ON public.surveys;
        DROP POLICY IF EXISTS "Authenticated users can delete own surveys" ON public.surveys;
        DROP POLICY IF EXISTS "auth_users_select_own_surveys" ON public.surveys;
        DROP POLICY IF EXISTS "auth_users_insert_surveys" ON public.surveys;
        DROP POLICY IF EXISTS "auth_users_update_own_surveys" ON public.surveys;
        DROP POLICY IF EXISTS "auth_users_delete_own_surveys" ON public.surveys;
        DROP POLICY IF EXISTS "authenticated_users_select_own_surveys" ON public.surveys;
        DROP POLICY IF EXISTS "authenticated_users_insert_surveys" ON public.surveys;
        DROP POLICY IF EXISTS "authenticated_users_update_own_surveys" ON public.surveys;
        DROP POLICY IF EXISTS "authenticated_users_delete_own_surveys" ON public.surveys;
    `;
    if (await executeSql(dropPolicies, 'Removendo todas as pol√≠ticas existentes')) {
        successCount++;
    }

    // 5. Criar pol√≠ticas apenas para usu√°rios autenticados
    totalOperations++;
    const createAuthPolicies = `
        -- Pol√≠tica para SELECT
        CREATE POLICY "authenticated_users_select_own_surveys" ON public.surveys
            FOR SELECT TO authenticated
            USING (auth.uid() = user_id);

        -- Pol√≠tica para INSERT
        CREATE POLICY "authenticated_users_insert_surveys" ON public.surveys
            FOR INSERT TO authenticated
            WITH CHECK (auth.uid() = user_id);

        -- Pol√≠tica para UPDATE
        CREATE POLICY "authenticated_users_update_own_surveys" ON public.surveys
            FOR UPDATE TO authenticated
            USING (auth.uid() = user_id)
            WITH CHECK (auth.uid() = user_id);

        -- Pol√≠tica para DELETE
        CREATE POLICY "authenticated_users_delete_own_surveys" ON public.surveys
            FOR DELETE TO authenticated
            USING (auth.uid() = user_id);
    `;
    if (await executeSql(createAuthPolicies, 'Criando pol√≠ticas para usu√°rios autenticados')) {
        successCount++;
    }

    // 6. Verificar configura√ß√£o final
    totalOperations++;
    const finalCheck = `
        SELECT 
            'RLS Status' as check_type,
            schemaname,
            tablename,
            rowsecurity as rls_enabled
        FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename = 'surveys'
        
        UNION ALL
        
        SELECT 
            'Policies' as check_type,
            schemaname,
            policyname as tablename,
            CASE WHEN roles = '{authenticated}' THEN true ELSE false END as rls_enabled
        FROM pg_policies 
        WHERE schemaname = 'public'
        AND tablename = 'surveys'
        ORDER BY check_type, tablename;
    `;
    if (await executeSql(finalCheck, 'Verificando configura√ß√£o final')) {
        successCount++;
    }

    // Relat√≥rio final
    console.log('\n' + '=' .repeat(80));
    console.log('üìä RELAT√ìRIO FINAL DA CORRE√á√ÉO');
    console.log('=' .repeat(80));
    console.log(`‚úÖ Opera√ß√µes bem-sucedidas: ${successCount}/${totalOperations}`);
    
    if (successCount === totalOperations) {
        console.log('üéâ Corre√ß√£o aplicada com sucesso!');
        console.log('\nüîß Pr√≥ximos passos:');
        console.log('   1. Execute: node test-complete-security.cjs');
        console.log('   2. Confirme que SELECT an√¥nimo foi bloqueado na tabela surveys');
    } else {
        console.log('‚ö†Ô∏è  Algumas opera√ß√µes falharam.');
        console.log('\nüîß A√ß√µes recomendadas:');
        console.log('   1. Execute manualmente o arquivo: fix-surveys-anon-access.sql');
        console.log('   2. Verifique os logs de erro acima');
        console.log('   3. Execute: node test-complete-security.cjs');
    }
    
    console.log('\n‚úÖ Script de corre√ß√£o conclu√≠do');
}

// Executar corre√ß√£o
applySurveysFix().catch(console.error);