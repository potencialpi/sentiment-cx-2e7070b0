const { createClient } = require('@supabase/supabase-js');

// Verifica√ß√£o de vari√°veis de ambiente
if (!process.env.SUPABASE_URL && !process.env.VITE_SUPABASE_URL) {
  console.error('‚ùå SUPABASE_URL n√£o encontrada nas vari√°veis de ambiente');
  console.log('üí° Certifique-se de que o arquivo .env.local existe e cont√©m VITE_SUPABASE_URL');
  process.exit(1);
}

if (!process.env.SUPABASE_ANON_KEY && !process.env.VITE_SUPABASE_ANON_KEY) {
  console.error('‚ùå SUPABASE_ANON_KEY n√£o encontrada nas vari√°veis de ambiente');
  console.log('üí° Certifique-se de que o arquivo .env.local existe e cont√©m VITE_SUPABASE_ANON_KEY');
  process.exit(1);
}


// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL || process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_ANON_KEY || process.env.VITE_SUPABASE_ANON_KEY;

const supabase = createClient(supabaseUrl, supabaseKey);

async function testRLSAuthentication() {
  console.log('üîê Testando RLS e Autentica√ß√£o para tabela surveys\n');
  
  try {
    // 1. Testar INSERT sem autentica√ß√£o (deve falhar)
    console.log('1. Testando INSERT sem autentica√ß√£o...');
    const { data: insertData, error: insertError } = await supabase
      .from('surveys')
      .insert({
        title: 'Teste Survey',
        description: 'Teste de inser√ß√£o sem auth',
        user_id: '00000000-0000-0000-0000-000000000000' // UUID fake
      });
    
    if (insertError) {
      console.log('‚úÖ INSERT sem auth falhou como esperado:', insertError.message);
    } else {
      console.log('‚ùå INSERT sem auth deveria ter falhado, mas passou!');
    }
    
    // 2. Verificar usu√°rio atual
    console.log('\n2. Verificando usu√°rio atual...');
    const { data: userData, error: userError } = await supabase.auth.getUser();
    
    if (userError || !userData.user) {
      console.log('‚ùå Nenhum usu√°rio autenticado encontrado');
      console.log('\nüìã DIAGN√ìSTICO:');
      console.log('- O RLS est√° funcionando corretamente (bloqueou INSERT sem auth)');
      console.log('- Para opera√ß√µes autenticadas, √© necess√°rio fazer login primeiro');
      console.log('- Use supabase.auth.signInWithPassword() antes de opera√ß√µes CRUD');
      return;
    }
    
    console.log('‚úÖ Usu√°rio autenticado:', userData.user.email);
    
    // 3. Testar INSERT com autentica√ß√£o
    console.log('\n3. Testando INSERT com autentica√ß√£o...');
    const { data: authInsertData, error: authInsertError } = await supabase
      .from('surveys')
      .insert({
        title: 'Survey Autenticado',
        description: 'Teste com usu√°rio autenticado',
        user_id: userData.user.id
      });
    
    if (authInsertError) {
      console.log('‚ùå INSERT com auth falhou:', authInsertError.message);
    } else {
      console.log('‚úÖ INSERT com auth funcionou!');
      console.log('Survey criado:', authInsertData);
    }
    
    // 4. Testar SELECT com autentica√ß√£o
    console.log('\n4. Testando SELECT com autentica√ß√£o...');
    const { data: selectData, error: selectError } = await supabase
      .from('surveys')
      .select('*')
      .eq('user_id', userData.user.id);
    
    if (selectError) {
      console.log('‚ùå SELECT falhou:', selectError.message);
    } else {
      console.log('‚úÖ SELECT funcionou! Surveys encontrados:', selectData.length);
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
  }
  
  console.log('\nüìã RESUMO DO DIAGN√ìSTICO:');
  console.log('- RLS (Row Level Security) est√° ATIVO na tabela surveys');
  console.log('- Opera√ß√µes sem autentica√ß√£o s√£o bloqueadas (correto)');
  console.log('- Para corrigir erros de RLS na aplica√ß√£o:');
  console.log('  1. Certifique-se de que o usu√°rio est√° autenticado');
  console.log('  2. Use supabase.auth.signInWithPassword() antes de opera√ß√µes CRUD');
  console.log('  3. Verifique se user_id corresponde ao usu√°rio autenticado');
  console.log('\nüí° SOLU√á√ÉO:');
  console.log('- O RLS N√ÉO precisa ser corrigido - est√° funcionando corretamente');
  console.log('- O problema est√° na implementa√ß√£o da autentica√ß√£o na aplica√ß√£o');
  console.log('- Verifique se todas as opera√ß√µes CRUD s√£o feitas ap√≥s login');
}

testRLSAuthentication();