require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function checkSurveysRLS() {
  console.log('üîç Analisando erro 42501 - Permission denied for table surveys');
  console.log('\nüìã Testando diferentes tipos de acesso √† tabela surveys...');
  
  try {
    // Teste 1: Acesso com chave an√¥nima
    console.log('\nüîë Teste 1: Acesso com chave an√¥nima...');
    const supabaseAnon = createClient(
      process.env.VITE_SUPABASE_URL,
      process.env.VITE_SUPABASE_ANON_KEY
    );
    
    const { data: anonData, error: anonError } = await supabaseAnon
      .from('surveys')
      .select('id, title')
      .limit(1);
      
    if (anonError) {
      console.log('‚ùå Erro com chave an√¥nima:', anonError);
    } else {
      console.log('‚úÖ Acesso an√¥nimo funcionando:', anonData?.length || 0, 'registros');
    }
    
    // Teste 2: Acesso com service role
    console.log('\nüîë Teste 2: Acesso com service role...');
    const { data: serviceData, error: serviceError } = await supabase
      .from('surveys')
      .select('id, title')
      .limit(1);
      
    if (serviceError) {
      console.log('‚ùå Erro com service role:', serviceError);
    } else {
      console.log('‚úÖ Acesso service role funcionando:', serviceData?.length || 0, 'registros');
    }
    
    // Teste 3: Tentar opera√ß√£o de UPDATE (que est√° falhando)
    console.log('\nüìù Teste 3: Tentando opera√ß√£o UPDATE...');
    const { data: updateData, error: updateError } = await supabase
      .from('surveys')
      .update({ title: 'Test Update' })
      .eq('id', '00000000-0000-0000-0000-000000000000') // ID inexistente para n√£o afetar dados
      .select();
      
    if (updateError) {
      console.log('‚ùå Erro na opera√ß√£o UPDATE:', updateError);
      console.log('\nüîç DIAGN√ìSTICO DO ERRO 42501:');
      
      if (updateError.code === '42501') {
        console.log('\nüìã Poss√≠veis causas do erro "permission denied for table surveys":');
        console.log('\n1. üîí RLS (Row Level Security) habilitado sem pol√≠ticas adequadas');
        console.log('   - A tabela tem RLS ativo mas n√£o h√° pol√≠ticas que permitam UPDATE');
        console.log('   - Ou as pol√≠ticas existentes s√£o muito restritivas');
        console.log('\n2. üë§ Problema de autentica√ß√£o/autoriza√ß√£o');
        console.log('   - Usu√°rio n√£o est√° autenticado corretamente');
        console.log('   - Token JWT inv√°lido ou expirado');
        console.log('   - Usu√°rio n√£o tem as permiss√µes necess√°rias');
        console.log('\n3. üîß Configura√ß√£o de pol√≠ticas RLS');
        console.log('   - Pol√≠ticas podem estar bloqueando opera√ß√µes UPDATE');
        console.log('   - Condi√ß√µes das pol√≠ticas n√£o s√£o atendidas pelo contexto atual');
        console.log('\n4. üéØ Contexto de execu√ß√£o');
        console.log('   - Opera√ß√£o sendo executada em contexto inadequado (frontend vs backend)');
        console.log('   - Falta de claims JWT necess√°rios para as pol√≠ticas');
      }
    } else {
      console.log('‚úÖ Opera√ß√£o UPDATE funcionando (nenhum registro afetado como esperado)');
    }
    
    // Testar acesso direto √† tabela
    console.log('\nüß™ Testando acesso direto √† tabela surveys...');
    const { data: testAccess, error: accessError } = await supabase
      .from('surveys')
      .select('id, title')
      .limit(1);
      
    if (accessError) {
      console.log('‚ùå Erro no acesso direto:', accessError);
      console.log('\nüîç DIAGN√ìSTICO:');
      console.log('- C√≥digo 42501 indica que o usu√°rio n√£o tem permiss√£o para acessar a tabela');
      console.log('- Isso pode ser causado por:');
      console.log('  1. RLS habilitado sem pol√≠ticas adequadas');
      console.log('  2. Pol√≠ticas RLS muito restritivas');
      console.log('  3. Usu√°rio n√£o autenticado ou com role inadequado');
      console.log('  4. Falta de permiss√µes b√°sicas na tabela');
    } else {
      console.log('‚úÖ Acesso direto funcionando:', testAccess?.length || 0, 'registros encontrados');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

checkSurveysRLS();