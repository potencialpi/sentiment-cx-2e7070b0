const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabaseUrl = process.env.VITE_SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function createRLSPolicies() {
  console.log('üîí Criando pol√≠ticas RLS manualmente...');
  console.log('=' .repeat(60));

  const policies = [
    {
      name: 'surveys_authenticated_select',
      sql: `CREATE POLICY "surveys_authenticated_select" ON surveys FOR SELECT TO authenticated USING (auth.uid() = user_id)`
    },
    {
      name: 'surveys_authenticated_insert', 
      sql: `CREATE POLICY "surveys_authenticated_insert" ON surveys FOR INSERT TO authenticated WITH CHECK (auth.uid() = user_id AND auth.uid() IS NOT NULL)`
    },
    {
      name: 'surveys_authenticated_update',
      sql: `CREATE POLICY "surveys_authenticated_update" ON surveys FOR UPDATE TO authenticated USING (auth.uid() = user_id AND auth.uid() IS NOT NULL) WITH CHECK (auth.uid() = user_id AND auth.uid() IS NOT NULL)`
    },
    {
      name: 'surveys_authenticated_delete',
      sql: `CREATE POLICY "surveys_authenticated_delete" ON surveys FOR DELETE TO authenticated USING (auth.uid() = user_id AND auth.uid() IS NOT NULL)`
    }
  ];

  // Primeiro, garantir que RLS est√° habilitado
  console.log('1. Habilitando RLS na tabela surveys...');
  try {
    const { error: rlsError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE surveys ENABLE ROW LEVEL SECURITY'
    });
    if (rlsError) {
      console.log(`   ‚ùå Erro: ${rlsError.message}`);
    } else {
      console.log('   ‚úÖ RLS habilitado');
    }
  } catch (err) {
    console.log(`   ‚ùå Exce√ß√£o: ${err.message}`);
  }

  // For√ßar RLS
  console.log('2. For√ßando RLS na tabela surveys...');
  try {
    const { error: forceError } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE surveys FORCE ROW LEVEL SECURITY'
    });
    if (forceError) {
      console.log(`   ‚ùå Erro: ${forceError.message}`);
    } else {
      console.log('   ‚úÖ RLS for√ßado');
    }
  } catch (err) {
    console.log(`   ‚ùå Exce√ß√£o: ${err.message}`);
  }

  // Criar cada pol√≠tica
  console.log('3. Criando pol√≠ticas RLS...');
  for (const policy of policies) {
    console.log(`   Criando pol√≠tica: ${policy.name}`);
    try {
      const { error } = await supabase.rpc('exec_sql', {
        sql: policy.sql
      });
      
      if (error) {
        console.log(`   ‚ùå Erro: ${error.message}`);
      } else {
        console.log(`   ‚úÖ Pol√≠tica ${policy.name} criada`);
      }
    } catch (err) {
      console.log(`   ‚ùå Exce√ß√£o: ${err.message}`);
    }
  }

  // Revogar permiss√µes para anon
  console.log('4. Revogando permiss√µes para usu√°rios an√¥nimos...');
  try {
    const { error: revokeError } = await supabase.rpc('exec_sql', {
      sql: 'REVOKE ALL ON surveys FROM anon'
    });
    if (revokeError) {
      console.log(`   ‚ùå Erro: ${revokeError.message}`);
    } else {
      console.log('   ‚úÖ Permiss√µes revogadas para anon');
    }
  } catch (err) {
    console.log(`   ‚ùå Exce√ß√£o: ${err.message}`);
  }

  // Garantir permiss√µes para authenticated
  console.log('5. Garantindo permiss√µes para usu√°rios autenticados...');
  try {
    const { error: grantError } = await supabase.rpc('exec_sql', {
      sql: 'GRANT SELECT, INSERT, UPDATE, DELETE ON surveys TO authenticated'
    });
    if (grantError) {
      console.log(`   ‚ùå Erro: ${grantError.message}`);
    } else {
      console.log('   ‚úÖ Permiss√µes concedidas para authenticated');
    }
  } catch (err) {
    console.log(`   ‚ùå Exce√ß√£o: ${err.message}`);
  }

  console.log('\n' + '=' .repeat(60));
  console.log('üéØ Verificando resultado final...');

  // Verificar pol√≠ticas criadas
  try {
    const { data: policies, error: policiesError } = await supabase.rpc('exec_sql', {
      sql: `SELECT policyname, cmd, roles FROM pg_policies WHERE schemaname = 'public' AND tablename = 'surveys' ORDER BY policyname`
    });

    if (policiesError) {
      console.log('‚ö†Ô∏è N√£o foi poss√≠vel verificar pol√≠ticas:', policiesError.message);
    } else {
      console.log('\nüìã Pol√≠ticas RLS ativas na tabela surveys:');
      if (policies && policies.length > 0) {
        policies.forEach(policy => {
          console.log(`   - ${policy.policyname} (${policy.cmd}) para ${policy.roles}`);
        });
      } else {
        console.log('   ‚ùå Nenhuma pol√≠tica encontrada!');
      }
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Erro ao verificar pol√≠ticas:', error.message);
  }

  // Testar acesso an√¥nimo
  console.log('\nüß™ Testando acesso an√¥nimo...');
  const supabaseAnon = createClient(supabaseUrl, process.env.VITE_SUPABASE_ANON_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);
  
  try {
    const { data: testData, error: testError } = await supabaseAnon
      .from('surveys')
      .select('*')
      .limit(1);
    
    if (testError) {
      console.log('‚úÖ SUCESSO: Acesso an√¥nimo √† tabela surveys BLOQUEADO!');
      console.log(`   Erro: ${testError.message}`);
    } else {
      console.log('‚ùå PROBLEMA: Acesso an√¥nimo √† tabela surveys ainda permitido!');
      console.log(`   Dados retornados: ${testData ? testData.length : 0} registros`);
    }
  } catch (error) {
    console.log('‚úÖ SUCESSO: Acesso an√¥nimo √† tabela surveys BLOQUEADO (exce√ß√£o)!');
    console.log(`   Erro: ${error.message}`);
  }

  console.log('\nüéâ Configura√ß√£o de pol√≠ticas RLS conclu√≠da!');
}

// Executar cria√ß√£o de pol√≠ticas
createRLSPolicies().catch(console.error);