import { createClient } from '@supabase/supabase-js';

// Configura√ß√µes do Supabase
const supabaseUrl = 'https://mjuxvppexydaeuoernxa.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1qdXh2cHBleHlkYWV1b2VybnhhIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM0NDAzNjYsImV4cCI6MjA2OTAxNjM2Nn0.ECVfL7CLqJj4wSPBY7g5yu_zdfBqbUTCK18MAXHjeTg';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1qdXh2cHBleHlkYWV1b2VybnhhIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzQ0MDM2NiwiZXhwIjoyMDY5MDE2MzY2fQ._X2HsKnApncZhgPmsr0-VWrulAlmk_dogyuG2-OgMpY';

// Criar clientes Supabase
const supabaseAnon = createClient(supabaseUrl, supabaseAnonKey);
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

async function checkSupabaseHealth() {
  console.log('üè• VERIFICA√á√ÉO DE SA√öDE DO SUPABASE');
  console.log('=' .repeat(50));
  
  try {
    // Teste b√°sico de conectividade
    console.log('‚è≥ Testando conectividade b√°sica...');
    const { data, error } = await supabaseAnon.from('profiles').select('count').limit(1);
    
    if (error) {
      console.log('‚ùå Erro na conectividade:', error.message);
      return false;
    }
    
    console.log('‚úÖ Conectividade b√°sica OK');
    return true;
    
  } catch (err) {
    console.log('üí• Exce√ß√£o na conectividade:', err.message);
    return false;
  }
}

async function checkAuthSettings() {
  console.log('\nüîê VERIFICA√á√ÉO DAS CONFIGURA√á√ïES DE AUTH');
  console.log('=' .repeat(50));
  
  try {
    // Tentar obter configura√ß√µes de Auth usando service role
    console.log('‚è≥ Verificando configura√ß√µes de Auth...');
    
    // Teste 1: Verificar se conseguimos acessar auth.users
    const { data: users, error: usersError } = await supabaseAdmin
      .from('auth.users')
      .select('id')
      .limit(1);
    
    if (usersError) {
      console.log('‚ùå Erro ao acessar auth.users:', usersError.message);
      console.log('   C√≥digo:', usersError.code || 'N/A');
      console.log('   Detalhes:', usersError.details || 'N/A');
    } else {
      console.log('‚úÖ Acesso a auth.users OK');
      console.log('   Usu√°rios encontrados:', users?.length || 0);
    }
    
    // Teste 2: Verificar configura√ß√µes via RPC
    console.log('\n‚è≥ Tentando verificar configura√ß√µes via RPC...');
    const { data: config, error: configError } = await supabaseAdmin.rpc('get_auth_config');
    
    if (configError) {
      console.log('‚ùå Erro ao obter configura√ß√µes (esperado se RPC n√£o existir):', configError.message);
    } else {
      console.log('‚úÖ Configura√ß√µes obtidas:', config);
    }
    
  } catch (err) {
    console.log('üí• Exce√ß√£o na verifica√ß√£o de Auth:', err.message);
  }
}

async function checkRLSPolicies() {
  console.log('\nüõ°Ô∏è VERIFICA√á√ÉO DAS POL√çTICAS RLS');
  console.log('=' .repeat(50));
  
  try {
    // Verificar pol√≠ticas RLS nas tabelas principais
    const tables = ['profiles', 'companies', 'surveys', 'responses'];
    
    for (const table of tables) {
      console.log(`\n‚è≥ Verificando RLS para tabela '${table}'...`);
      
      // Tentar acessar a tabela com anon key
      const { data, error } = await supabaseAnon
        .from(table)
        .select('*')
        .limit(1);
      
      if (error) {
        console.log(`‚ùå Erro ao acessar '${table}':`, error.message);
        console.log('   C√≥digo:', error.code || 'N/A');
        
        if (error.code === 'PGRST116') {
          console.log('   üí° Poss√≠vel causa: RLS habilitado sem pol√≠ticas adequadas');
        }
      } else {
        console.log(`‚úÖ Acesso a '${table}' OK`);
        console.log('   Registros encontrados:', data?.length || 0);
      }
    }
    
  } catch (err) {
    console.log('üí• Exce√ß√£o na verifica√ß√£o de RLS:', err.message);
  }
}

async function checkUserLimits() {
  console.log('\nüë• VERIFICA√á√ÉO DE LIMITES DE USU√ÅRIOS');
  console.log('=' .repeat(50));
  
  try {
    // Contar usu√°rios existentes
    console.log('‚è≥ Contando usu√°rios existentes...');
    
    const { count, error } = await supabaseAdmin
      .from('auth.users')
      .select('*', { count: 'exact', head: true });
    
    if (error) {
      console.log('‚ùå Erro ao contar usu√°rios:', error.message);
    } else {
      console.log('‚úÖ Total de usu√°rios:', count || 0);
      
      if (count && count > 50000) {
        console.log('‚ö†Ô∏è  ATEN√á√ÉO: Muitos usu√°rios - poss√≠vel limite atingido');
      } else if (count && count > 10000) {
        console.log('‚ö†Ô∏è  N√∫mero alto de usu√°rios - verificar limites do plano');
      } else {
        console.log('‚úÖ N√∫mero de usu√°rios dentro do esperado');
      }
    }
    
  } catch (err) {
    console.log('üí• Exce√ß√£o na verifica√ß√£o de limites:', err.message);
  }
}

async function testDirectUserCreation() {
  console.log('\nüß™ TESTE DE CRIA√á√ÉO DIRETA DE USU√ÅRIO (ADMIN API)');
  console.log('=' .repeat(50));
  
  const timestamp = Date.now();
  const testEmail = `admin-test-${timestamp}@example.com`;
  const testPassword = 'AdminTest123!';
  
  console.log(`üìß Email de teste: ${testEmail}`);
  
  try {
    console.log('‚è≥ Tentando criar usu√°rio via Admin API...');
    
    const { data, error } = await supabaseAdmin.auth.admin.createUser({
      email: testEmail,
      password: testPassword,
      email_confirm: true
    });
    
    if (error) {
      console.log('‚ùå ERRO na cria√ß√£o via Admin API:');
      console.log('   Mensagem:', error.message);
      console.log('   C√≥digo:', error.status || 'N/A');
      console.log('   Tipo:', error.name || 'N/A');
      console.log('   Detalhes completos:', JSON.stringify(error, null, 2));
      return false;
    }
    
    console.log('‚úÖ Usu√°rio criado via Admin API com SUCESSO!');
    console.log('   User ID:', data.user?.id || 'N/A');
    console.log('   Email:', data.user?.email || 'N/A');
    
    // Tentar deletar o usu√°rio de teste
    console.log('\n‚è≥ Limpando usu√°rio de teste...');
    const { error: deleteError } = await supabaseAdmin.auth.admin.deleteUser(data.user.id);
    
    if (deleteError) {
      console.log('‚ö†Ô∏è  Erro ao deletar usu√°rio de teste:', deleteError.message);
    } else {
      console.log('‚úÖ Usu√°rio de teste deletado com sucesso');
    }
    
    return true;
    
  } catch (err) {
    console.log('üí• EXCE√á√ÉO na cria√ß√£o via Admin API:');
    console.log('   Erro:', err.message);
    console.log('   Stack:', err.stack);
    return false;
  }
}

async function main() {
  console.log('üîç DIAGN√ìSTICO COMPLETO DO SUPABASE');
  console.log('Data/Hora:', new Date().toLocaleString());
  console.log('\n');
  
  // Executar todas as verifica√ß√µes
  const healthOK = await checkSupabaseHealth();
  await checkAuthSettings();
  await checkRLSPolicies();
  await checkUserLimits();
  const adminCreateOK = await testDirectUserCreation();
  
  // Resumo final
  console.log('\nüìä RESUMO DO DIAGN√ìSTICO:');
  console.log('=' .repeat(50));
  console.log(`Conectividade B√°sica: ${healthOK ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  console.log(`Cria√ß√£o via Admin API: ${adminCreateOK ? '‚úÖ OK' : '‚ùå FALHOU'}`);
  
  if (!healthOK) {
    console.log('\nüö® PROBLEMA CR√çTICO: Conectividade b√°sica falhou');
    console.log('Verifique se o projeto Supabase est√° ativo e as credenciais est√£o corretas.');
  } else if (!adminCreateOK) {
    console.log('\nüö® PROBLEMA CR√çTICO: Admin API n√£o consegue criar usu√°rios');
    console.log('Isso indica um problema fundamental na configura√ß√£o do Supabase Auth.');
    console.log('\nüí° RECOMENDA√á√ïES:');
    console.log('1. Verificar logs detalhados no Dashboard do Supabase');
    console.log('2. Verificar se Auth est√° habilitado no painel');
    console.log('3. Verificar configura√ß√µes de seguran√ßa e RLS');
    console.log('4. Considerar recriar o projeto Supabase');
  } else {
    console.log('\n‚úÖ Admin API funciona - problema pode estar na configura√ß√£o do Auth p√∫blico');
    console.log('Verificar configura√ß√µes de confirma√ß√£o de email e pol√≠ticas RLS.');
  }
  
  console.log('\nüèÅ Diagn√≥stico conclu√≠do.');
}

// Executar o diagn√≥stico
main().catch(console.error);