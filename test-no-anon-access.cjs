require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Cliente com service role (para setup)
const supabase = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Cliente an√¥nimo (deve falhar)
const supabaseAnon = createClient(
  process.env.VITE_SUPABASE_URL,
  process.env.VITE_SUPABASE_ANON_KEY
);

async function testNoAnonAccess() {
  console.log('üîí Testando que acesso an√¥nimo foi removido da tabela surveys...');
  
  try {
    // Teste 1: SELECT an√¥nimo deve falhar
    console.log('\nüìã Teste 1: SELECT com chave an√¥nima (deve falhar)...');
    const { data: anonSelect, error: anonSelectError } = await supabaseAnon
      .from('surveys')
      .select('id, title')
      .limit(1);
      
    if (anonSelectError) {
      console.log('‚úÖ SELECT an√¥nimo bloqueado corretamente:', anonSelectError.message);
    } else {
      console.log('‚ùå PROBLEMA: SELECT an√¥nimo ainda funcionando!', anonSelect?.length || 0, 'registros');
    }
    
    // Teste 2: INSERT an√¥nimo deve falhar
    console.log('\nüìù Teste 2: INSERT com chave an√¥nima (deve falhar)...');
    const { data: anonInsert, error: anonInsertError } = await supabaseAnon
      .from('surveys')
      .insert({
        title: 'Test Survey An√¥nimo',
        description: 'Teste que deve falhar',
        user_id: '00000000-0000-0000-0000-000000000000'
      })
      .select();
      
    if (anonInsertError) {
      console.log('‚úÖ INSERT an√¥nimo bloqueado corretamente:', anonInsertError.message);
    } else {
      console.log('‚ùå PROBLEMA: INSERT an√¥nimo ainda funcionando!', anonInsert);
      
      // Limpar se conseguiu inserir
      if (anonInsert && anonInsert[0]?.id) {
        await supabase.from('surveys').delete().eq('id', anonInsert[0].id);
        console.log('üßπ Registro de teste removido');
      }
    }
    
    // Teste 3: UPDATE an√¥nimo deve falhar
    console.log('\n‚úèÔ∏è Teste 3: UPDATE com chave an√¥nima (deve falhar)...');
    const { data: anonUpdate, error: anonUpdateError } = await supabaseAnon
      .from('surveys')
      .update({ title: 'Tentativa de Update An√¥nimo' })
      .eq('id', '00000000-0000-0000-0000-000000000000')
      .select();
      
    if (anonUpdateError) {
      console.log('‚úÖ UPDATE an√¥nimo bloqueado corretamente:', anonUpdateError.message);
    } else {
      console.log('‚ùå PROBLEMA: UPDATE an√¥nimo ainda funcionando!');
    }
    
    // Teste 4: Verificar que service role ainda funciona
    console.log('\nüîë Teste 4: Verificando que service role ainda funciona...');
    const { data: serviceSelect, error: serviceSelectError } = await supabase
      .from('surveys')
      .select('id, title')
      .limit(1);
      
    if (serviceSelectError) {
      console.log('‚ùå PROBLEMA: Service role n√£o est√° funcionando:', serviceSelectError.message);
    } else {
      console.log('‚úÖ Service role funcionando corretamente:', serviceSelect?.length || 0, 'registros');
    }
    
    // Resumo dos testes
    console.log('\nüìä RESUMO DOS TESTES:');
    console.log('   - SELECT an√¥nimo:', anonSelectError ? 'üîí BLOQUEADO' : '‚ùå PERMITIDO');
    console.log('   - INSERT an√¥nimo:', anonInsertError ? 'üîí BLOQUEADO' : '‚ùå PERMITIDO');
    console.log('   - UPDATE an√¥nimo:', anonUpdateError ? 'üîí BLOQUEADO' : '‚ùå PERMITIDO');
    console.log('   - Service role:', serviceSelectError ? '‚ùå FALHOU' : '‚úÖ FUNCIONANDO');
    
    const allBlocked = anonSelectError && anonInsertError && anonUpdateError;
    const serviceWorking = !serviceSelectError;
    
    if (allBlocked && serviceWorking) {
      console.log('\nüéØ ‚úÖ SUCESSO: Acesso an√¥nimo removido completamente!');
      console.log('   - Usu√°rios an√¥nimos n√£o podem mais acessar a tabela surveys');
      console.log('   - Service role continua funcionando para opera√ß√µes administrativas');
    } else {
      console.log('\n‚ö†Ô∏è ATEN√á√ÉO: Ainda h√° problemas de seguran√ßa!');
      if (!allBlocked) {
        console.log('   - Acesso an√¥nimo ainda n√£o foi completamente bloqueado');
      }
      if (!serviceWorking) {
        console.log('   - Service role n√£o est√° funcionando corretamente');
      }
    }
    
  } catch (error) {
    console.log('üí• Erro inesperado:', error);
  }
}

testNoAnonAccess().then(() => {
  console.log('\n‚úÖ Teste de seguran√ßa conclu√≠do');
}).catch(console.error);