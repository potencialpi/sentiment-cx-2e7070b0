const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function fixUserPlanIssue() {
  console.log('üîß Diagnosticando e corrigindo problema do plano do usu√°rio...');
  
  try {
    // 1. Verificar se as tabelas existem
    console.log('\n1Ô∏è‚É£ Verificando exist√™ncia das tabelas...');
    
    // Verificar tabela profiles
    try {
      const { data: profilesTest, error: profilesError } = await supabase
        .from('profiles')
        .select('count')
        .limit(1);
      
      if (profilesError) {
        console.log('‚ùå Tabela profiles:', profilesError.message);
      } else {
        console.log('‚úÖ Tabela profiles existe');
      }
    } catch (e) {
      console.log('‚ùå Erro ao acessar tabela profiles:', e.message);
    }
    
    // Verificar tabela companies
    try {
      const { data: companiesTest, error: companiesError } = await supabase
        .from('companies')
        .select('count')
        .limit(1);
      
      if (companiesError) {
        console.log('‚ùå Tabela companies:', companiesError.message);
      } else {
        console.log('‚úÖ Tabela companies existe');
      }
    } catch (e) {
      console.log('‚ùå Erro ao acessar tabela companies:', e.message);
    }
    
    // 2. Verificar usu√°rios autenticados
    console.log('\n2Ô∏è‚É£ Verificando usu√°rios autenticados...');
    
    // Simular o que o frontend faz
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session) {
      console.log('‚ö†Ô∏è Nenhuma sess√£o ativa encontrada');
      console.log('üí° Isso √© normal se voc√™ n√£o estiver logado');
    } else {
      console.log('‚úÖ Sess√£o ativa encontrada:', session.user.id);
      
      // Testar a fun√ß√£o getUserPlan
      console.log('\n3Ô∏è‚É£ Testando fun√ß√£o getUserPlan...');
      
      try {
        // Buscar na tabela companies
        const { data: companyData, error: companyError } = await supabase
          .from('companies')
          .select('plan_name')
          .eq('user_id', session.user.id)
          .single();
        
        console.log('Companies query result:', { data: companyData, error: companyError });
        
        // Buscar na tabela profiles
        const { data: profileData, error: profileError } = await supabase
          .from('profiles')
          .select('plan_name')
          .eq('user_id', session.user.id)
          .single();
        
        console.log('Profiles query result:', { data: profileData, error: profileError });
        
      } catch (error) {
        console.error('‚ùå Erro ao testar getUserPlan:', error);
      }
    }
    
    // 3. Verificar estrutura das tabelas
    console.log('\n4Ô∏è‚É£ Verificando estrutura das tabelas...');
    
    // Verificar colunas da tabela profiles
    try {
      const { data: profiles, error } = await supabase
        .from('profiles')
        .select('*')
        .limit(1);
      
      if (!error && profiles && profiles.length > 0) {
        console.log('‚úÖ Colunas da tabela profiles:', Object.keys(profiles[0]));
      } else if (!error) {
        console.log('‚ö†Ô∏è Tabela profiles existe mas est√° vazia');
      }
    } catch (e) {
      console.log('‚ùå Erro ao verificar estrutura da tabela profiles');
    }
    
    // Verificar colunas da tabela companies
    try {
      const { data: companies, error } = await supabase
        .from('companies')
        .select('*')
        .limit(1);
      
      if (!error && companies && companies.length > 0) {
        console.log('‚úÖ Colunas da tabela companies:', Object.keys(companies[0]));
      } else if (!error) {
        console.log('‚ö†Ô∏è Tabela companies existe mas est√° vazia');
      }
    } catch (e) {
      console.log('‚ùå Erro ao verificar estrutura da tabela companies');
    }
    
    // 4. Criar dados de teste se necess√°rio
    console.log('\n5Ô∏è‚É£ Verificando se √© necess√°rio criar dados de teste...');
    
    if (session) {
      // Verificar se o usu√°rio tem perfil
      const { data: existingProfile } = await supabase
        .from('profiles')
        .select('*')
        .eq('user_id', session.user.id)
        .single();
      
      if (!existingProfile) {
        console.log('‚ö†Ô∏è Usu√°rio n√£o tem perfil, criando...');
        
        const { error: insertError } = await supabase
          .from('profiles')
          .insert({
            user_id: session.user.id,
            plan_name: 'start-quantico',
            email: session.user.email
          });
        
        if (insertError) {
          console.error('‚ùå Erro ao criar perfil:', insertError);
        } else {
          console.log('‚úÖ Perfil criado com sucesso!');
        }
      } else {
        console.log('‚úÖ Usu√°rio j√° tem perfil:', existingProfile);
      }
    }
    
    console.log('\nüéØ DIAGN√ìSTICO COMPLETO!');
    console.log('\nüí° POSS√çVEIS SOLU√á√ïES:');
    console.log('1. Se as tabelas n√£o existem, execute as migra√ß√µes do Supabase');
    console.log('2. Se as tabelas est√£o vazias, fa√ßa login no frontend para criar o perfil');
    console.log('3. Se o erro persiste, verifique se o usu√°rio tem permiss√µes RLS');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

fixUserPlanIssue();